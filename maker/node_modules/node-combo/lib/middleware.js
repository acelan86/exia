/**
 * @author fuqiang[designsor@gmail.com]
 * @version 20111127
 * @description 静态服务器监听handle
 */
var fs = require('fs'),
    zlib = require('zlib'),
    path = require('path'),
    url = require('url'),
    resolve = require('path').resolve;
    mime = require('./mime.js'),
    combo = require('./combo.js'),
    tools = require('./tools.js'),
    range = require('./range.js'),
    template = require('./template.js'),
    config = require('./config.js').config;

exports.contentType = function(ext) {
    return mime[ext] || 'text/plain';
};
exports.ext = function(filepath) {
    var ext = path.extname(filepath);
    return (ext) ? ext.slice(1) : 'unknow';
};
exports.setExpires = function(ext, rep) {
    var expires = config.expires;
    if (ext.match(expires.fileMatch)) {
        var now = new Date();
        now.setTime(now.getTime() + expires.maxAge * 1000);
        exports.setHeader(rep, {
            "Expires": now.toUTCString(),
            "Cache-Control": "max-age=" + expires.maxAge
        });
    }
};
exports.noCacheCallback = function(stats, req, rep, callback) {
    var lastModified = stats ? stats.mtime.toUTCString() : stats,
    ifModifiedSince = 'if-Modified-Since'.toLowerCase();
    if (lastModified === undefined && req.headers[ifModifiedSince]) {
        rep.writeHead(304, 'Not Modified');
        rep.end();
        return;
    }
    if (req.headers[ifModifiedSince] && lastModified == req.headers[ifModifiedSince]) {
        rep.writeHead(304, 'Not Modified');
        rep.end();
    } else {
        callback();
    }
};
//404 error
exports.setHeader = function(rep, config) {
    var i;
    for (i in config) {
        rep.setHeader(i, config[i]);
    }
};
exports.writeError = function(rep) {
    rep.writeHead(404, {
        'Content-Type': 'text/plain',
        'Server': 'Nodejs:' + process.version
    });
    rep.write('404');
    rep.end();
};
//compress
exports.compressHandle = function(raw, statusCode, reasonPhrase, ext, req, rep, callback) {
    var stream = raw,
    acceptEncoding = req.headers['accept-encoding'] || "",
    matched = ext.match(config.compress.match);
    function gizp(s) {
        if (matched && acceptEncoding.match(/\bgzip\b/)) {
            exports.setHeader(rep, {
                "Content-Encoding": "gzip"
            });
            s = s.pipe(zlib.createGzip());
        } else if (matched && acceptEncoding.match(/\bdeflate\b/)) {
            exports.setHeader(rep, {
                "Content-Encoding": "deflate"
            });
            s = s.pipe(zlib.createDeflate());
        }
        rep.writeHead(statusCode, reasonPhrase);
        s.pipe(rep);
    }
    //增加txt，js，css的自定义标签机制,stream有path属性……
    var filepath = stream.path;
    if (/txt|js|css/.test(ext)) {
        template.findConfig(filepath, function(ret) {
            console.log(ret);
            var JSONRET = {},
            i;
            ret.forEach(function(element) {
                var JSONFILE = {};
                try {
                    var str = fs.readFileSync(element, 'utf-8');
                    JSONFILE = eval("(" + str + ")");
                } catch(ex) {
                    console.log('json type error');
                    JSONFILE = {};
                }
                for (i in JSONFILE) {
                    JSONRET[i] = JSONFILE[i];
                }
            });
            template.displace(JSONRET, filepath, function(source) {
                var NOW = new Date().valueOf();
                var file = __dirname + '/temp' + NOW + '.txt';
                var wt = fs.createWriteStream(file);
                wt.end(source);
                wt.on('error', function(err) {
                    console.log(err);
                });
                wt.on('close', function() {
                    var temp = fs.createReadStream(file);
                    gizp(temp);
                    fs.unlink(file);
                    if (callback) {
                        callback();
                    }
                });
            });
        });
    } else {
        gizp(stream);
        if (callback) {
            callback();
        }
    }
};
exports.combo = function (staticRoot) {
    return function(req, rep, next) {
        if ('GET' != req.method && 'HEAD' != req.method) {
            return next();
        }

        var o = url.parse(req.url, true),
            pathname = o.pathname,
            filepath = path.resolve(staticRoot.replace(/\.\./ig, ''), o.search);

        fs.stat(filepath, function(err, stats) {
            if (err) {
                //有可能是combo的格式
                var txtfiles = combo.check(filepath);
                if (txtfiles) {
                    combo.fetch(txtfiles, req, rep, stats);
                } else {
                    exports.writeError(rep);
                }
            } else {
                next();
            }
        });
    };
};

