var fs = require('fs'),
    mime = require('./mime.js').mime,
    tools = require('./tools.js'),
    handle = require('./middleware.js'),
    config = require('./config.js').config;

var TYPES = mime;
var Combo = {
    check: function(filepath) {
        return tools.checkFilePath(filepath, "js|css");
    },
    fetch: function(files, req, rep, stats) {
        handle.noCacheCallback(stats, req, rep, function() {
            var raw = [],
            isError;

            console.log('fetch', files, req.url);
            files.forEach(function(element, index) {
                fs.stat(element, function(err, stats) {
                    fs.readFile(element, function(err, data) {
                        if (data !== 'undefined') {
                            raw.push(data);
                        }
                        if (!isError && files.length === raw.length) {
                            raw = raw.join("");
                            var ext = handle.ext(files[0]),
                                contentType = handle.contentType(ext),
                                lastModified = stats.mtime.toUTCString(),
                                now = new Date(),
                                T = now.getTime();

                            handle.setHeader(rep, {
                                "Content-Type": contentType,
                                "Last-Modified": lastModified,
                                "Server": "Node " + process.version
                            });

                            handle.setExpires(ext, rep);

                            fs.writeFile('temp' + T + '.txt', raw || '', function(err) {
                                if (err) throw err;
                                var stream = fs.createReadStream('temp' + T + '.txt');
                                handle.compressHandle(stream, 200, "OK", ext, req, rep, function() {
                                    fs.unlink('temp' + T + '.txt');
                                });
                            });
                        }
                    });
                });
            });
        });
    }
};

exports.check = Combo.check;
exports.fetch = Combo.fetch;

